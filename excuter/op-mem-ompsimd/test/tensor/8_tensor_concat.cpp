 
#include <vector>
#include <iostream>


#include "deepx/op/cpu/concat.hpp"
#include "deepx/tensor.hpp"
#include "deepx/shape.hpp"
#include "deepx/shape_concat.hpp"
#include "deepx/op/cpu/new.hpp"
#include "deepx/op/cpu/init.hpp"
#include "deepx/op/cpu/print.hpp"
#include "stdutil/vector.hpp"
using namespace deepx;
using namespace deepx::op::cpu;

std::vector<Tensor<float>> maketensors(int i,std::vector<int> shape){
    std::vector<Tensor<float>> tensors(i);
    for (int j=0;j<i;j++){
        tensors[j] =New<float>(shape);
        constant<float>(tensors[j],  0.0+j);
    }
    return tensors;
}
void test_concat(){
    std::vector<int> shape={2,3,4};
    std::vector<Tensor<float>> tensors=maketensors(4,shape);
 
     
    std::cout<<"================"<<std::endl;
    for (int i=0;i<tensors[0].shape.dim;i++){
        Tensor<float> result=concat(tensors,i);
        print(result);
    }
    std::cout<<"================"<<std::endl;
/*
shape:[8, 3, 4]
[0]=[
 [0.00 0.00 0.00 0.00],
 [0.00 0.00 0.00 0.00],
 [0.00 0.00 0.00 0.00]
]
[1]=[
 [0.00 0.00 0.00 0.00],
 [0.00 0.00 0.00 0.00],
 [0.00 0.00 0.00 0.00]
]
[2]=[
 [1.00 1.00 1.00 1.00],
 [1.00 1.00 1.00 1.00],
 [1.00 1.00 1.00 1.00]
]
[3]=[
 [1.00 1.00 1.00 1.00],
 [1.00 1.00 1.00 1.00],
 [1.00 1.00 1.00 1.00]
]
[4]=[
 [2.00 2.00 2.00 2.00],
 [2.00 2.00 2.00 2.00],
 [2.00 2.00 2.00 2.00]
]
[5]=[
 [2.00 2.00 2.00 2.00],
 [2.00 2.00 2.00 2.00],
 [2.00 2.00 2.00 2.00]
]
[6]=[
 [3.00 3.00 3.00 3.00],
 [3.00 3.00 3.00 3.00],
 [3.00 3.00 3.00 3.00]
]
[7]=[
 [3.00 3.00 3.00 3.00],
 [3.00 3.00 3.00 3.00],
 [3.00 3.00 3.00 3.00]
]
shape:[2, 12, 4]
[0]=[
 [0.00 0.00 0.00 0.00],
 [0.00 0.00 0.00 0.00],
 [0.00 0.00 0.00 0.00],
 [1.00 1.00 1.00 1.00],
 [1.00 1.00 1.00 1.00],
 [1.00 1.00 1.00 1.00],
 [2.00 2.00 2.00 2.00],
 [2.00 2.00 2.00 2.00],
 [2.00 2.00 2.00 2.00],
 [3.00 3.00 3.00 3.00],
 [3.00 3.00 3.00 3.00],
 [3.00 3.00 3.00 3.00]
]
[1]=[
 [0.00 0.00 0.00 0.00],
 [0.00 0.00 0.00 0.00],
 [0.00 0.00 0.00 0.00],
 [1.00 1.00 1.00 1.00],
 [1.00 1.00 1.00 1.00],
 [1.00 1.00 1.00 1.00],
 [2.00 2.00 2.00 2.00],
 [2.00 2.00 2.00 2.00],
 [2.00 2.00 2.00 2.00],
 [3.00 3.00 3.00 3.00],
 [3.00 3.00 3.00 3.00],
 [3.00 3.00 3.00 3.00]
]
shape:[2, 3, 16]
[0]=[
 [0.00 0.00 0.00 0.00 1.00 1.00 1.00 1.00 2.00 2.00 2.00 2.00 3.00 3.00 3.00 3.00],
 [0.00 0.00 0.00 0.00 1.00 1.00 1.00 1.00 2.00 2.00 2.00 2.00 3.00 3.00 3.00 3.00],
 [0.00 0.00 0.00 0.00 1.00 1.00 1.00 1.00 2.00 2.00 2.00 2.00 3.00 3.00 3.00 3.00]
]
[1]=[
 [0.00 0.00 0.00 0.00 1.00 1.00 1.00 1.00 2.00 2.00 2.00 2.00 3.00 3.00 3.00 3.00],
 [0.00 0.00 0.00 0.00 1.00 1.00 1.00 1.00 2.00 2.00 2.00 2.00 3.00 3.00 3.00 3.00],
 [0.00 0.00 0.00 0.00 1.00 1.00 1.00 1.00 2.00 2.00 2.00 2.00 3.00 3.00 3.00 3.00]
]
*/
}

int main(){
    test_concat();
    return 0;
}